\documentclass{article}
\usepackage[utf8]{inputenc}
\usepackage{framed}
\usepackage{graphicx}
\usepackage{hyperref}
\usepackage[hdivide={2cm, *, 2cm}, vscale=0.85]{geometry}
%\usepackage[backend=bibtex]{biblatex}
\usepackage{listings}

\title{Coursera - Get Data}
\author{Antonella}
\date{12-xx.05.2015}

\begin{document}

\maketitle

\section{Download data}

Check/set working dir

<<>>=
getwd()
setwd("~/classes/coursera_jhu_datascience/datasciencecoursera/02_gettingandcleaningdata")
@


Check/create directories

<<>>=
if(!file.exists("data")) {
  dir.create("data")
}
@

Download from internet

<<eval=FALSE>>=
fileUrl <- "https://data.baltimorecity.gov/api/views/dz54-2aru/rows.csv?accessType=DOWNLOAD"
download.file(fileUrl, destfile="./data/cameras.csv", method="curl")
list.files("./data")
dateDownloaded <- date()
@

If excel files\dots

<<eval=FALSE>>=
install.packages("xlsx")
require(xlsx)
dfx <- read.xlsx("./data/cameras.xlsx", sheetIndex=1, header=TRUE)
@

XML (eXtensible Markup Language)
\begin{itemize}
  \item \url{http://www.omegahat.org/RSXML/shortIntro.pdf}
  \item \url{http://www.stat.berkeley.edu/~statcur/Workshop2/Presentations/XML.pdf}
\end{itemize}

<<eval=FALSE>>=
install.packages("XML")
@
<<>>=
require(XML)
xmlfileUrl<-"http://www.w3schools.com/xml/simple.xml"
doc <- xmlTreeParse(xmlfileUrl, useInternal=TRUE)
rootNode<- xmlRoot(doc)
xmlName(rootNode)
xpathSApply(rootNode,"//name",xmlValue)
xpathSApply(rootNode,"//calories",xmlValue)
@

Can do similar on HTML files

<<eval=FALSE>>=
htmlfileUrl <- "http://espn.go.com/nfl/team/_/name/bal/baltimore-ravens"
doch <- htmlTreeParse(htmlfileUrl, useInternal=TRUE)
scores <- xpathSApply(doch,"//li[@class='score']", xmlValue)
teams <- xpathSApply(doch,"//li[@class='team-name']", xmlValue)
@


JSON (JavaScript Object Notation)
\begin{itemize}
  \item \url{http://www.r-bloggers.com/new-package-jsonlite-a-smarter-json-encoderdecoder/}
  \item \url{http://cran.r-project.org/web/packages/jsonlite/vignettes/json-mapping.pdf}
\end{itemize}


<<eval=FALSE>>=
install.packages("jsonlite")
@
<<>>=
require(jsonlite)
jsonData<-fromJSON("https://api.github.com/users/jtleek/repos")
myjson <- toJSON(iris, pretty=TRUE)
names(jsonData)
@

\section{data.table}

\url{http://stackoverflow.com/questions/13618488/what-you-can-do-with-data-frame-that-you-cant-in-data-table}

Installation, when install.packages does not work straight-forward: from shell

\begin{lstlisting}[language=bash]
$ sudo apt-get install r-cran-plyr
$ sudo apt-get install r-cran-reshape2
\end{lstlisting}

and then from R
<<eval=FALSE>>=
install.packages("data.table")
@

Operations on columns:
<<>>=
require(data.table)
dt <- data.table(iris)
dt[,mean(Sepal.Length),by=Species]
dt[,Mean.Sepal.Length:=mean(Sepal.Length),by=Species]
dt[,.N,by=Species]
setorder(dt, "Sepal.Width")
dt[,.N,by=Sepal.Width]
@

Keys are very useful to subset and merge tables
<<>>=
dt1 <- data.table(x=c('a', 'a', 'b', 'c'), y=1:4)
dt2 <- data.table(x=c('a', 'b', 'b', 'd'), z=8:11)
setkey(dt1,x)
setkey(dt2,x)
merge(dt1,dt2)
@


\section{mySQL}

Installation, when install.packages does not work straight-forward: from shell

\begin{lstlisting}[language=bash]
$ sudo apt-get install mysql-server
$ sudo apt-get install libmysqlclient-dev
\end{lstlisting}

and then from R
<<eval=FALSE>>=
install.packages("RMySQL")
@


E.g. the database \url{http://genome.ucsc.edu/} has \url{http://genome.ucsc.edu/goldenPath/help/mysql.html}

<<>>=

@

<<eval=FALSE>>=

@

<<eval=FALSE>>=

@

<<eval=FALSE>>=

@

<<>>=

@

<<>>=

@

<<>>=

@

<<>>=

@

<<>>=

@

<<>>=

@

<<>>=

@

<<>>=

@

<<>>=

@

\end{document}